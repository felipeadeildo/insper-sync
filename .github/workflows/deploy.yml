name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test .env file
        run: |
          cat > .env << EOF
          DEBUG=True
          SECRET_KEY=test-secret-key-for-testing-only
          CELERY_BROKER_URL=redis://localhost:6379/0
          CELERY_RESULT_BACKEND=redis://localhost:6379/0
          EOF

      - name: Run migrations
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test -v 2

  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    environment: production
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat > .env << EOF
          # Django
          DEBUG=False
          SECRET_KEY=${{ secrets.SECRET_KEY }}

          # Email Configuration
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}
          EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}

          WEB_PORT=${{ secrets.WEB_PORT }}

          DOMAIN=${{ secrets.DOMAIN }}
          EOF

      - name: Deploy services
        run: |
          docker compose down --remove-orphans || true
          docker compose build --no-cache
          docker compose up -d

      - name: Cleanup
        run: |
          docker image prune -f || true
