# Generated by Django 5.2.1 on 2025-05-26 23:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GoogleEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_event_id', models.CharField(help_text='ID único do evento no Google Calendar', max_length=255)),
                ('google_calendar_id', models.CharField(help_text='ID do calendário no Google', max_length=255)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('all_day', models.BooleanField(default=False)),
                ('location', models.CharField(blank=True, max_length=500)),
                ('html_link', models.URLField(blank=True)),
                ('timezone', models.CharField(default='America/Sao_Paulo', max_length=50)),
                ('raw_data', models.JSONField(help_text='Dados brutos do evento do Google')),
                ('content_hash', models.CharField(help_text='Hash MD5 do conteúdo para detectar mudanças', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_synced_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Se o evento ainda existe no Google')),
                ('synced_from_insper', models.BooleanField(default=False, help_text='Se foi criado a partir de evento do Insper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='google_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InsperEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insper_event_id', models.CharField(help_text='ID único do evento no Insper', max_length=255)),
                ('insper_internal_id', models.CharField(blank=True, help_text='ID interno do sistema Insper', max_length=255)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('all_day', models.BooleanField(default=False)),
                ('disciplina_codigo', models.CharField(blank=True, max_length=200)),
                ('docente', models.CharField(blank=True, max_length=200)),
                ('turma', models.CharField(blank=True, max_length=100)),
                ('dependencia', models.CharField(blank=True, max_length=200)),
                ('tipo_evento', models.CharField(blank=True, max_length=100)),
                ('timezone', models.CharField(default='America/Sao_Paulo', max_length=50)),
                ('raw_data', models.JSONField(help_text='Dados brutos do evento do Insper')),
                ('content_hash', models.CharField(help_text='Hash MD5 do conteúdo para detectar mudanças', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_synced_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Se o evento ainda existe no Insper')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insper_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SyncConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sync_enabled', models.BooleanField(default=True)),
                ('sync_frequency_hours', models.IntegerField(default=6, help_text='Frequência de sincronização em horas')),
                ('sync_all_events', models.BooleanField(default=True)),
                ('excluded_event_types', models.JSONField(blank=True, default=list, help_text='Tipos de evento para excluir')),
                ('excluded_disciplines', models.JSONField(blank=True, default=list, help_text='Disciplinas para excluir')),
                ('google_calendar_name', models.CharField(default='Insper - Calendário Acadêmico', max_length=255)),
                ('add_insper_prefix', models.BooleanField(default=True, help_text="Adicionar '[Insper]' no título dos eventos")),
                ('include_teacher_in_description', models.BooleanField(default=True)),
                ('include_discipline_code', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_sync_attempt', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sync_config', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SyncSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('running', 'Em Execução'), ('completed', 'Concluída'), ('failed', 'Falhou'), ('partial', 'Parcialmente Concluída')], default='running', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('sync_start_date', models.DateField(help_text='Data inicial do período sincronizado')),
                ('sync_end_date', models.DateField(help_text='Data final do período sincronizado')),
                ('insper_events_found', models.IntegerField(default=0)),
                ('google_events_found', models.IntegerField(default=0)),
                ('events_created', models.IntegerField(default=0)),
                ('events_updated', models.IntegerField(default=0)),
                ('events_deleted', models.IntegerField(default=0)),
                ('events_failed', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('error_details', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='EventMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('synced', 'Sincronizado'), ('pending', 'Pendente'), ('failed', 'Falhou'), ('conflict', 'Conflito'), ('deleted', 'Deletado')], default='pending', max_length=20)),
                ('direction', models.CharField(choices=[('insper_to_google', 'Insper → Google'), ('google_to_insper', 'Google → Insper'), ('bidirectional', 'Bidirecional')], default='insper_to_google', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_synced_at', models.DateTimeField(auto_now=True)),
                ('error_message', models.TextField(blank=True)),
                ('needs_manual_review', models.BooleanField(default=False)),
                ('review_notes', models.TextField(blank=True)),
                ('google_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='sync.googleevent')),
                ('insper_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='sync.insperevent')),
                ('sync_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_mappings', to='sync.syncsession')),
            ],
        ),
        migrations.AddIndex(
            model_name='googleevent',
            index=models.Index(fields=['user', 'start_datetime'], name='sync_google_user_id_399004_idx'),
        ),
        migrations.AddIndex(
            model_name='googleevent',
            index=models.Index(fields=['user', 'google_event_id'], name='sync_google_user_id_d9f87e_idx'),
        ),
        migrations.AddIndex(
            model_name='googleevent',
            index=models.Index(fields=['content_hash'], name='sync_google_content_6e82e4_idx'),
        ),
        migrations.AddIndex(
            model_name='googleevent',
            index=models.Index(fields=['is_active', 'user'], name='sync_google_is_acti_2cc1f7_idx'),
        ),
        migrations.AddIndex(
            model_name='googleevent',
            index=models.Index(fields=['synced_from_insper'], name='sync_google_synced__6eb7c1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='googleevent',
            unique_together={('user', 'google_event_id')},
        ),
        migrations.AddIndex(
            model_name='insperevent',
            index=models.Index(fields=['user', 'start_datetime'], name='sync_insper_user_id_990e72_idx'),
        ),
        migrations.AddIndex(
            model_name='insperevent',
            index=models.Index(fields=['user', 'insper_event_id'], name='sync_insper_user_id_242dad_idx'),
        ),
        migrations.AddIndex(
            model_name='insperevent',
            index=models.Index(fields=['content_hash'], name='sync_insper_content_475557_idx'),
        ),
        migrations.AddIndex(
            model_name='insperevent',
            index=models.Index(fields=['is_active', 'user'], name='sync_insper_is_acti_3944f2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='insperevent',
            unique_together={('user', 'insper_event_id')},
        ),
        migrations.AddIndex(
            model_name='syncconfiguration',
            index=models.Index(fields=['sync_enabled', 'last_sync_attempt'], name='sync_syncco_sync_en_d1de78_idx'),
        ),
        migrations.AddIndex(
            model_name='syncsession',
            index=models.Index(fields=['user', '-started_at'], name='sync_syncse_user_id_47b14d_idx'),
        ),
        migrations.AddIndex(
            model_name='syncsession',
            index=models.Index(fields=['status', '-started_at'], name='sync_syncse_status_26b2d3_idx'),
        ),
        migrations.AddIndex(
            model_name='eventmapping',
            index=models.Index(fields=['status', '-last_synced_at'], name='sync_eventm_status_70062a_idx'),
        ),
        migrations.AddIndex(
            model_name='eventmapping',
            index=models.Index(fields=['sync_session', 'status'], name='sync_eventm_sync_se_dfa383_idx'),
        ),
        migrations.AddIndex(
            model_name='eventmapping',
            index=models.Index(fields=['needs_manual_review'], name='sync_eventm_needs_m_4e3eea_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventmapping',
            unique_together={('insper_event', 'google_event')},
        ),
    ]
